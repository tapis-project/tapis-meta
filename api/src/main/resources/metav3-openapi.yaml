openapi: 3.0.1   # updated 08.13.2020-14:57
info:
  title: Tapis Meta V3 API
  description: >-
    The Tapis Meta API provides access to a MongoDB database. A standalone service which connects to a MongoDB
    database and immediately exposes all of MongoDBâ€™s capabilities through a complete REST API, which allows the user to read
    and write JSON messages and binary data via HTTP.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: "0.1"
externalDocs:
  description: Tapis Home
  url: https://tacc-cloud.readthedocs.io/projects/agave
servers:
  - url: http://localhost:8080/v3
    description: Local test environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: root
    description: Server root that hosts databases.
  - name: db
    description: The databases listed in host.
  - name: collection
    description: The collections hosted in a database.
  - name: document
    description: The documents hosted in a collection.
  - name: index
    description: The indexes for a collection
  - name: aggregation
    description: The aggregations available in the database.
  - name: general
    description: informational endpoints

paths:
  /meta/healthCheck:
    get:
      tags:
        - general
      description: Health check for liveness. No authorization required.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
  /meta/:
    get:
      tags:
        - root
      summary: listDBNames
      description: List the names of all Dbs available. This operation is limited to Service admins.
      operationId: listDBNames
      responses:
        '200':
          description: List of DB names returned as a json array.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Not authorized.
  /meta/{db}:
    get:
      tags:
        - db
      summary: listCollectionNames
      description: List the names of all collections in the database.
      operationId: listCollectionNames
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of collection names returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    put:  # todo in ResouceBucket
      tags:
        - db
      summary: createDB
      description: Create the database named in the path. This operation is limited to Service admins.
      operationId: createDB
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: List of collecton names returned.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:  # todo in ResouceBucket
      tags:
        - db
      summary: deleteDB
      description: Delete a database. This operation is limited to Service admins.
      operationId: deleteDB
      parameters:
        - name: If-Match
          in: header
          required: true
          schema:
            type: string
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted DB.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict The database's ETag must be provided using the 'If-Match' header.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/_meta:
    get:
      tags:
        - db
      summary: getDBMetadata
      description: Get the Metadata for the database.
      operationId: getDBMetadata
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The metadata kept for this database in a json document.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}:
    put:
      tags:
        - collection
      summary: createCollection
      description: Create a new collection in the database.
      operationId: createCollection
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Collection created. An Etag header value is returned for collection identification.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    get:
      tags:
        - collection
      summary: listDocuments
      description: |-
        List of documents in the collection.

        If no query parameters are submitted a default number of documents <pagesize> is returned in default sort order (sort)
         as the first page <page> of a document result set. The default sort order is based on the "_id" of the document.

        A (filter) query parameter value is represented by a valid MongoDb query document. This will allow retrieving
        documents that meet a desired criteria. When coupled with the (keys) query parameter a projection will limit the
        fields to return for all matching documents.

      operationId: listDocuments
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pagesize
          in: query
          schema:
            type: integer
            default: 10
        - name: filter
          in: query
          schema:
            type: object
            default: {}
        - name: sort
          in: query
          schema:
            type: object
            default: {}
        - name: keys
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List of documents returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    post:
      tags:
        - document
      summary: createDocument
      description: |-

        Create a new document in collection.

        A document request body with out the field <_id> gets an auto generated id

        A document request body with out the field <_id> writes a document with that id unless a duplicate is encountered.

        A batch of document creations is possible by submitting an array of documents in the request body. All those documents
         will be added to to the collection in bulk.

        The addition of the (basic) query parameter set to true will return a response for a single document creation as a
          Tapis basic response with the newly created <_id> for later reference.

      operationId: createDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: basic
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: "the json document being added to the collection or array of documents added in bulk operation"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Document created.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - collection
      summary: deleteCollection
      description: |-

        Delete a collection in the database.
        This operation is limit by default to tenant administrators.

        An (If-Match) header parameter with the value of the collections etag must be supplied in order for
        this operations to succeed.

      operationId: deleteCollection
      parameters:
        - name: If-Match
          in: header
          required: true
          schema:
            type: string
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Delete named collection from the database.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_filter:
    post:
      tags:
        - collection
      summary: submitLargeQuery
      description: |-

        This is a POST version of filter on a collection with a filter value to large to submit in a query parameter.
        If the filter parameter is to large, it may exceed the HTTP header character limit. The HTTP server will throw
        a query header to large error.

      operationId: submitLargeQuery
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: string
            default: 1
        - name: pagesize
          in: query
          schema:
            type: string
            default: 10
        - name: sort
          in: query
          schema:
            type: object
            default: {}
        - name: keys
          in: query
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: "the json document as a MongoDB query document"
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Document list.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_size:
    get:
      tags:
        - collection
      summary: getCollectionSize
      description: |-
        Get the size of the collection.

        The response will contain the number of documents found in the collection.

      operationId: getCollectionSize
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Number of documents in collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_meta:
    get:
      tags:
        - collection
      summary: getCollectionMetadata
      description: Get the Metadata for the collection.
      operationId: getCollectionMetadata
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection metadata returned.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/{docId}:
    get:
      tags:
        - document
      summary: getDocument
      description: Get a document form the collection by its _id.
      operationId: getDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document returned.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    put:
      tags:
        - document
      summary: replaceDocument
      description: |-
        Replace a document in the collection with the _id.

        Replaces the document with the json document submitted in the request body.

      operationId: replaceDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "the json document being replaced in the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Document upserted.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    patch:
      tags:
        - document
      summary: modifyDocument
      description:

        Modify a document in the collection with _id. The fields submitted in the json of the request body
        will replace the same named fields in the current document.

      operationId: modifyDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
        - name: np
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: "the json document being added to the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Document modified.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - document
      summary: deleteDocument
      description: Delete a document in the collection by id.
      operationId: deleteDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document returned.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_indexes:
    get:
      tags:
        - index
      summary: listIndexes
      description: List all indexes in the collection.
      operationId: listIndexes
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of indexes returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_indexes/{indexName}:
    put:
      tags:
        - index
      summary: createIndex
      description: |-
        Create an index on collection in the database.

        The request body should hold a json document that defines the index

            { "keys":  <keys>, "ops": <options> }

          Example - create an unique, sparse index on property â€˜q

            {"keys": {"qty": 1},"ops": {"unique": true, "sparse": true }}

      operationId: createIndex
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: indexName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "the index being added to the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Empty response.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - index
      summary: deleteIndex
      description: Delete an index on the collection.
      operationId: deleteIndex
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: indexName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted index from the collection.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_aggr/{aggregation}:
    put:
      tags:
        - aggregation
      summary: addAggregation
      description: Create an aggregation that can be executed by users.
      operationId: addAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "the aggregation being defined for the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: empty response body on created.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    get:
      tags:
        - aggregation
      summary: useAggregation
      description: Use an aggregation defined for a collection.
      operationId: useAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: an array of results.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    post:
      tags:
        - aggregation
      summary: submitLargeAggregation
      description: |-

        This is a POST version of useAggregation on a collection with a avars value to large to submit in a query parameter.
        If the avars parameter is to large, it may exceed the HTTP header character limit. The HTTP server will throw
        a query header to large error.

      operationId: submitLargeAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pagesize
          in: query
          schema:
            type: integer
            default: 10
        - name: keys   # todo verify this field
          in: query
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: "the json document for avars query parameter substitution"
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Document list.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - aggregation
      summary: deleteAggregation
      description: Delete an aggregation defined for a collection.
      operationId: deleteAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: empty response body on delete.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
